Arithmetic {
  Exp [AddExp] = ‛«AddExp»’

  AddExp_plus  [AddExp kplus MulExp] = ‛(+ «AddExp» «MulExp»)’
  AddExp_minus [AddExp kplus MulExp] = ‛(- «AddExp» «MulExp»)’
  AddExp_else   [Exp]                 = ‛«Exp»’

  MulExp_times  [MulExp kasterisk ExpExp] = ‛(* «MulExp» «ExpExp»)’
  MulExp_divide [MulExp kslash    ExpExp] = ‛(/ «MulExp» «ExpExp»)’
  MulExp_else   [ExpExp]                  = ‛«ExpExp»’

  ExpExp_power [PriExp kcaret ExpExp] = ‛(exp «PriExp» «ExpExp»)’
  ExpExp_else  [PriExp]               = ‛«PriExp»’

  PriExp_paren  [lp Exp rp] = ‛(«Exp»)’
  PriExp_pos    [kplus  Exp] = ‛(+ «Exp»)’
  PriExp_neg    [kminus Exp] = ‛(- «Exp»)’
  PriExp_ident  [x]          = ‛«x»’
  PriExp_number [x]          = ‛«x»’

  ident [letter alnumz*] = ‛«letter»«alnumz»’

  number_fract [digitz* kdot digits+] = ‛«digitz».«digits»’
  number_whole [digits+]              = ‛«digits»’
}
